---
title: "Tidy Tuesday Exercise 2"
output: 
  html_document:
    toc: FALSE
editor: 
  markdown: 
    wrap: 72
---

# Tidy Tuesday Exercise 2
## Egg Production
### 4/12/2023

# Get the Data
Upload public access data for exercise via tidytuesdayR package.

```{r}
library(tidytuesdayR)
library(tidyverse)
library(here)
library(janitor)
library(tidymodels)
library(dplyr)
library(ranger)
library(rpart)
library(glmnet)
library(rpart.plot)
library(vip)

# Get the Data

# Read in with tidytuesdayR package 
# Install from CRAN via: install.packages("tidytuesdayR")
# This loads the readme and all the datasets for the week of interest

# Either ISO-8601 date or year/week works!

tuesdata <- tidytuesdayR::tt_load('2023-04-11')
tuesdata <- tidytuesdayR::tt_load(2023, week = 15)

summary(tuesdata)

eggproduction <- tuesdata$`egg-production`
cagefreepercentages <- tuesdata$`cage-free-percentages`

```
# Data Dictonary

## US Egg Production

The data this week comes from [The Humane League's US Egg Production
dataset](https://thehumaneleague.org/article/E008R01-us-egg-production-data)
by [Samara Mendez](https://samaramendez.github.io/). Dataset and code is available for this project on OSF at [US Egg Production Data Set](https://osf.io/z2gxn/).

This dataset tracks the supply of cage-free eggs in the United States from December 2007 to February 2021. For TidyTuesday we've used data through February 2021, but the full dataset, with data through the present, is available in the [OSF project](https://osf.io/z2gxn/). 


> In this project, they synthesize an analysis-ready data set that
> tracks cage-free hens and the supply of cage-free eggs relative to the
> overall numbers of hens and table eggs in the United States. The data
> set is based on reports produced by the United States Department of
> Agriculture (USDA), which are published weekly or monthly. They
> supplement these data with definitions and a taxonomy of egg products
> drawn from USDA and industry publications. The data include flock size
> (both absolute and relative) and egg production of cage-free hens as
> well as all table-egg-laying hens in the US, collected to understand
> the impact of the industry's cage-free transition on hens. Data
> coverage ranges from December 2007 to February 2021.


### Egg Production

|variable       |class     |description    |
|:--------------|:---------|:--------------|
|observed_month |double    |Month in which report observations are collected,Dates are recorded in ISO 8601 format YYYY-MM-DD |
|prod_type      |character |type of egg product: hatching, table eggs      |
|prod_process   |character |type of production process and housing: cage-free (organic), cage-free (non-organic), all. The value 'all' includes cage-free and conventional housing.   |
|n_hens         |double    |number of hens produced by hens for a given month-type-process combo   |
|n_eggs         |double    |number of eggs producing eggs for a given month-type-process combo     |
|source         |character |Original USDA report from which data are sourced. Values correspond to titles of PDF reports. Date of report is included in title.   |


### Cage Free Percentages

|variable       |class     |description    |
|:--------------|:---------|:--------------|
|observed_month |double    |Month in which report observations are collected,Dates are recorded in ISO 8601 format YYYY-MM-DD |
|percent_hens   |double    |observed or computed percentage of cage-free hens relative to all table-egg-laying hens  |
|percent_eggs   |double    |computed percentage of cage-free eggs relative to all table eggs,This variable is not available for data sourced from the Egg Markets Overview report |
|source         |character |Original USDA report from which data are sourced. Values correspond to titles of PDF reports. Date of report is included in title.  |

#Exploring Egg Production
```{r}
tibble(eggproduction)

ggplot() +
    geom_point(data = eggproduction, aes(x = n_hens, y = n_eggs, color = prod_process), shape = 19) +
    ggtitle("Laying Efficency", subtitle = "Number of hens vs number of eggs laid") +
    labs(x = "Hens", y = "Eggs")

ggplot() +
    geom_point(data = eggproduction, aes(x = n_hens, y = n_eggs, color = prod_process), shape = 19) +
    ggtitle("Laying Efficency", subtitle = "Number of hens vs number of eggs laid") +
    labs(x = "Hens", y = "Eggs") +
    xlim(0, 70000000) +
    ylim(0, 1700000000)

ggplot() +
    geom_line(data = eggproduction, aes(x = observed_month, y = n_eggs, color = prod_process)) +
    ggtitle("Eggs Production over time", subtitle = "") +
    labs(x = "Time", y = "Eggs")

```

#Exploring Cage Free %

```{r}
tibble(cagefreepercentages)

ggplot() +
    geom_line(data = cagefreepercentages, aes(x = observed_month, y = percent_eggs), color =  'darkgreen') +
    geom_line(data = cagefreepercentages, aes(x = observed_month, y = percent_hens), color =  'brown') +
    ggtitle("% Hens and Eggs relative to all Tables", subtitle = "") +
    labs(x = "Year", y = "Hens & Eggs (%)")
```
Will merge data via date

```{r}
ALLdata <- inner_join(cagefreepercentages, eggproduction, by="observed_month")
tibble(ALLdata)

#Now to avoid confusion remove sources and prod_process "all"

allclean <- ALLdata %>%
  select(observed_month  | percent_hens | n_hens | percent_eggs |  n_eggs | prod_process) %>%
  filter(!prod_process == 'all')

tibble(allclean)
```

More data visualization

```{r}
ggplot() +
  geom_point(data = allclean, aes(x = observed_month, y = percent_hens, size = n_hens), fill = 'brown', shape = 21, colour = "black") +
  geom_point(data = allclean, aes(x = observed_month, y = percent_eggs, size = n_eggs), fill = 'gold', shape = 21, colour = "black")  +
  ggtitle("Cage free eggs vs Years", subtitle = "") +
labs(x = "Year", y = "% Eggs and Hens")

ggplot() +
  geom_line(data = allclean, aes(x = observed_month, y = n_hens, colour = prod_process)) +
  ggtitle("Cage free hens", subtitle = "Organic vs non-Organic") +
labs(x = "Year", y = "Hens")

ggplot() +
  geom_line(data = allclean, aes(x = observed_month, y = n_eggs, colour = prod_process)) +
  ggtitle("Cage free egg production", subtitle = "Organic vs non-Organic") +
labs(x = "Year", y = "Eggs")
```
As the demand for cage free eggs increases so do the number of hens producing them.However, it seems like egg production may be less efficient in organic hens. We are going to explore!

#Fitting a model
##Hypothesis: Non-organic egg production is more efficient (more eggs produced per hen), then organic egg production in cage-free facilities.

###Data Setup
```{r}
#prepare data for machine learning

set.seed(123)
# Fix the random numbers by setting the seed 

cdata_split <- initial_split(allclean, prop = 2.8/4, strata = n_eggs) #70% training, 30% testing

# Create data frames for the two sets:
train_cdata <- training(cdata_split)
test_cdata  <- testing(cdata_split)

#5-fold cross-validation, 5 times repeated
fold_cdata <- vfold_cv(train_cdata, v = 5, repeats = 5, strata = prod_process)

#Create a recipe for the data and fitting. 
data_recipe <- recipe(n_eggs ~ prod_process, data = train_cdata) %>%
  step_dummy(all_nominal(), -all_outcomes()) 
```

## Null model performance

```{r}
null_recipe <- recipe(n_eggs ~ 1, data = train_cdata) %>%
  step_dummy(all_nominal(), -all_outcomes())

# Logistic model recipe
recipe_mod <- linear_reg() %>% 
  set_engine("lm") %>% 
  set_mode("regression")

# Model workflow to pair model and recipe 
null_flow <- workflow() %>% 
  add_model(recipe_mod) %>% 
  add_recipe(null_recipe)

#fit the null model to the folds made from the train data set.
null_train <- fit_resamples(null_flow, resamples = fold_cdata)

#Compute the RMSE for both training and test data
Null_Met <- collect_metrics(null_train)
Null_Met
#RMSE = 391114191
```

###Test Data with a linear model

```{r}
lm_flow <- workflow() %>% 
  add_model(recipe_mod) %>% 
  add_recipe(data_recipe)

fit<- lm_flow %>%
  fit(data = train_cdata)

fit %>%
  extract_fit_parsnip() %>%
  tidy()
```

###Performance metrics

```{r}
aug_test <- augment(fit, train_cdata)
rmse <- aug_test %>% rmse(truth = n_eggs, .pred)
rsq <- aug_test %>% rsq(truth = n_eggs, .pred)
metrics<- full_join(rmse, rsq)
metrics

#RMSE = 2.298755e+08
#Something is going wrong here

#Residuals?
egg_mod<- lm(n_eggs ~ prod_process, data = train_cdata)
res<- resid(egg_mod)
plot(fitted(egg_mod), res)

```

#Tree model

```{r}
#Tune
tune_spec_dtree <- 
  decision_tree(
    cost_complexity = tune(),
    tree_depth = tune()) %>%
  set_engine("rpart") %>% 
  set_mode("regression")
tune_spec_dtree

dtree_wf <- workflow() %>%
  add_model(tune_spec_dtree) %>%
  add_recipe(data_recipe)

#create a regular grid of values to try using some convenience functions 

tree_grid_dtree <-
  grid_regular(
    cost_complexity(), 
    tree_depth(), 
    levels = 5)

tree_grid_dtree

#### Tuning using Cross-validation

dtree_resample <- 
  dtree_wf %>% 
  tune_grid(
    resamples = fold_cdata,
    grid = tree_grid_dtree)

dtree_resample %>%
  collect_metrics()
```
## Plot

```{r}
dtree_resample %>%
  collect_metrics() %>%
  mutate(tree_depth = factor(tree_depth)) %>%
  ggplot(aes(cost_complexity, mean, color = tree_depth)) +
  geom_line(linewidth = 1.5, alpha = 0.6) +
  geom_point(size = 2) +
  facet_wrap(~ .metric, scales = "free", nrow = 2) +
  scale_x_log10(labels = scales::label_number()) +
  scale_color_viridis_d(option = "plasma", begin = .9, end = 0)

dtree_resample %>%
  show_best(n=1)

#these numbers are strange...

best_tree <- dtree_resample %>%
  select_best()
best_tree

```
#Make workflow

```{r}
dtree_final_wf <- 
  dtree_wf %>% 
  finalize_workflow(best_tree)

dtree_final_fit <- 
  dtree_final_wf %>%
  fit(train_cdata) 

dtree_residuals <- dtree_final_fit %>%
  augment(train_cdata) %>%
  select(c(.pred, n_eggs)) %>%
  mutate(.resid = n_eggs - .pred) 
  
#calculate residuals and make new row.
dtree_residuals
```

##Plot Pred vs Actual & Residuals

```{r}
#Actual
dtree_pred_plot <- ggplot(dtree_residuals, 
                          aes(x = n_eggs, 
                              y = .pred)) + 
  geom_point() + 
  labs(title = "Predictions vs Actual: Decision Tree", 
       x = "Egg Outcome", 
       y = "Egg Prediction")

dtree_pred_plot

#Residuals

dtree_residual_plot <- ggplot(dtree_residuals, 
                              aes(y = .resid, 
                                  x = .pred)) + 
  geom_point() + 
  labs(title = "Predictions vs Residuals: Decision Tree", 
       x = "Egg Prediction", 
       y = "Residuals")

plot(dtree_residual_plot)

```

### Regression Tree

```{r}

tree <- rpart(n_eggs ~ prod_process, data = train_cdata)

rpart.plot(tree)

p <- predict(tree, train_cdata)

rmse<- sqrt(mean(train_cdata$n_eggs - p))

r2<- (cor(train_cdata$n_eggs,p))

r2
rmse
```

###Random Forest Model

```{r}
#detect cores for RFM computation
cores <- parallel::detectCores()
cores

#Specify Model
rf_mod <- 
  rand_forest(mtry = tune(), min_n = tune(), trees = 1000) %>% 
  set_engine("ranger", num.threads = cores) %>% 
  set_mode("regression")

#Crea Wortekflow
rf_wf <- workflow() %>%
  add_model(rf_mod) %>%
  add_recipe(data_recipe)

#Create Tuning Grid
rf_grid  <- expand.grid(mtry = c(3, 4, 5, 6),
                        min_n = c(40,50,60), 
                        trees = c(500,1000)  )

#Cross-validation
rf_resample <- 
  rf_wf %>% 
  tune_grid(fold_cdata,
            grid = 25,
            control = control_grid(save_pred = TRUE),
            metrics = metric_set(yardstick::rmse))

rf_resample %>%
  collect_metrics()

#select best models
rf_resample %>%
  show_best(n=1)

#Selects best performing model
best_rf <- rf_resample %>%
  select_best(method = "rmse")

#RMSE = 234720024 STD_ERR = 6282911
```
# Plot Performance

```{r}
#Plot of actual train data
rf_resample %>%
  autoplot()
```

#Final Fit

```{r}
rf_final_wf <- 
  rf_wf %>% 
  finalize_workflow(best_rf)

rf_final_fit <- 
  rf_final_wf %>%
  fit(train_cdata) 

#Calculate residuals
rf_residuals <- rf_final_fit %>%
  augment(train_cdata) %>% 
  select(c(.pred, n_eggs)) %>%
  mutate(.resid = n_eggs - .pred) 

rf_residuals
```

#Model Predictions from Tuned vs Actual Outcomes

```{r}
rf_pred_plot <- ggplot(rf_residuals, 
                          aes(x = n_eggs, 
                              y = .pred)) + 
  geom_point() + 
  labs(title = "Predictions vs Actual: Random Forest", 
       x = "Eggs Actual", 
       y = "Eggs Prediction")

rf_pred_plot

rf_residual_plot <- ggplot(rf_residuals, 
                              aes(y = .resid, 
                                  x = .pred)) + 
  geom_point() + 
  labs(title = "Predictions vs Residuals: Random Forest", 
       x = "Egg Prediction", 
       y = "Residuals")

plot(rf_residual_plot) #view plot
```

# Final Assignment

These models acted strangely for me. I believe the best performing (i.e., the most normal) was the Tree model.

```{r}
#Model
dtree_final_fit_TEST <- 
  dtree_final_wf %>%
  fit(test_cdata) 

dtree_residualsT <- dtree_final_fit_TEST %>%
  augment(test_cdata) %>%
  select(c(.pred, n_eggs)) %>%
  mutate(.resid = n_eggs - .pred) 
  
#calculate residuals and make new row.
dtree_residualsT
```

##Plot Pred vs Actual & Residuals

```{r}
#Actual
dtree_pred_plot2 <- ggplot(dtree_residualsT, 
                          aes(x = n_eggs, 
                              y = .pred)) + 
  geom_point() + 
  labs(title = "Predictions vs Actual: Decision Tree", 
       x = "Egg Outcome", 
       y = "Egg Prediction")

dtree_pred_plot2

#Residuals

dtree_residual_plot2 <- ggplot(dtree_residualsT, 
                              aes(y = .resid, 
                                  x = .pred)) + 
  geom_point() + 
  labs(title = "Predictions vs Residuals: Decision Tree", 
       x = "Egg Prediction", 
       y = "Residuals")

plot(dtree_residual_plot2)

dtree_final_fit_TEST 
```

Actually I am unsure... 